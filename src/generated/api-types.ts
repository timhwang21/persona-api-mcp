/**
 * Auto-generated API types from OpenAPI specification
 * 
 * DO NOT EDIT THIS FILE MANUALLY
 * Generated by: scripts/generate-types.js
 * Generated at: 2025-07-03T07:01:34.913Z
 */

// Common API Response Types
export interface APIResponse<T> {
  data: T;
  included?: IncludedObject[];
  links?: PaginationLinks;
  meta?: Record<string, unknown>;
}

export interface APIErrorResponse {
  errors: APIError[];
}

export interface APIError {
  id?: string;
  status?: string;
  code?: string;
  title?: string;
  detail?: string;
  source?: {
    pointer?: string;
    parameter?: string;
  };
  meta?: Record<string, unknown>;
}

export interface PaginationLinks {
  prev?: string | null;
  next?: string | null;
}

export interface IncludedObject {
  type: string;
  id: string;
  attributes?: Record<string, any>;
  relationships?: Record<string, any>;
}

export interface QueryParams {
  include?: string | string[];
  'page[size]'?: number;
  'page[after]'?: string;
  'page[before]'?: string;
  sort?: string;
  [key: string]: any;
}

export type HTTPMethod = 'GET' | 'POST' | 'PATCH' | 'PUT' | 'DELETE';

export interface PersonaHeaders {
  'Authorization': string;
  'Content-Type': string;
  'Persona-Version': string;
  'Key-Inflection': string;
  'Idempotency-Key'?: string;
  [key: string]: string | undefined;
}

// Type guards
export function isAPIErrorResponse(obj: any): obj is APIErrorResponse {
  return obj && Array.isArray(obj.errors);
}

// Persona-specific resource types
export interface PersonaResource {
  type: string;
  id: string;
  attributes: Record<string, any>;
  relationships?: Record<string, any>;
}

export interface Inquiry extends PersonaResource {
  type: 'inquiry';
}

export interface Account extends PersonaResource {
  type: 'account';
}

export interface Case extends PersonaResource {
  type: 'case';
}

export interface Verification extends PersonaResource {
  type: 'verification';
}

export interface Report extends PersonaResource {
  type: 'report';
}

export interface Transaction extends PersonaResource {
  type: 'transaction';
}

export interface Device extends PersonaResource {
  type: 'device';
}

export interface Document extends PersonaResource {
  type: 'document';
}

export interface Webhook extends PersonaResource {
  type: 'webhook';
}

export interface APIKey extends PersonaResource {
  type: 'api-key';
}

export interface InquiryTemplate extends PersonaResource {
  type: 'inquiry-template';
}

// Create/Update request types
export interface CreateRequest<T = Record<string, any>> {
  data: {
    type?: string;
    attributes: T;
  };
  meta?: Record<string, any>;
}

export interface UpdateRequest<T = Record<string, any>> {
  data: {
    type?: string;
    attributes: T;
  };
}

// Type aliases for common requests
export type CreateInquiryRequest = CreateRequest;
export type UpdateInquiryRequest = UpdateRequest;
export type CreateAccountRequest = CreateRequest;
export type UpdateAccountRequest = UpdateRequest;

// Type guards for resources
export function isInquiry(obj: any): obj is Inquiry {
  return obj && obj.type === 'inquiry';
}

export function isAccount(obj: any): obj is Account {
  return obj && obj.type === 'account';
}

export function isCase(obj: any): obj is Case {
  return obj && obj.type === 'case';
}

export function isVerification(obj: any): obj is Verification {
  return obj && obj.type === 'verification';
}

export function isReport(obj: any): obj is Report {
  return obj && obj.type === 'report';
}

export function isTransaction(obj: any): obj is Transaction {
  return obj && obj.type === 'transaction';
}

export function isDevice(obj: any): obj is Device {
  return obj && obj.type === 'device';
}

export function isDocument(obj: any): obj is Document {
  return obj && obj.type === 'document';
}

export function isInquiryTemplate(obj: any): obj is InquiryTemplate {
  return obj && obj.type === 'inquiry-template';
}

// Export resource type union
export type AllResourceTypes = 
  | Inquiry 
  | Account 
  | Case 
  | Verification 
  | Report 
  | Transaction 
  | Device 
  | Document 
  | Webhook 
  | APIKey 
  | InquiryTemplate;

// Utility types
export type ResourceType = AllResourceTypes['type'];

// Export all schema names for runtime use
export const SCHEMA_NAMES = [
  "inquiry",
  "account", 
  "case",
  "verification",
  "report",
  "transaction",
  "device",
  "document",
  "webhook",
  "api-key",
  "inquiry-template"
] as const;